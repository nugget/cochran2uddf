#!/usr/bin/tclsh8.5

package require Tclx
package require tdom

proc logmsg {buf} {
	puts $buf
}

proc get_avg {l} {
	set n [llength $l]
	if {!$n} {return 0.0}
	set avg 0.0
	foreach r $l {
		set avg [expr $avg + $r]
	}
	set avg [expr $avg/double($n)]
	return $avg
}

proc xml_date {candate} {
	# 18Sep11 09:38:47
	set monthlist [list _ Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec]
	
	set buf ""
	regexp {(\d\d)(...)(\d\d) (\d\d):(\d\d):(\d\d)} $candate _ dd mmm yy hour minute seconds
	set yyyy [expr 2000 + $yy]
	set mm [lsearch -exact $monthlist $mmm]

	set buf "<date><year>$yyyy</year><month>$mm</month><day>$dd</day></date><time><hour>$hour</hour><minute>$minute</minute></time>"

	return $buf
}

proc iso_datetime {candate} {
	# 18Sep11 09:38:47
	set monthlist [list _ Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec]
	
	set buf ""
	regexp {(\d\d)(...)(\d\d) (\d\d):(\d\d):(\d\d)} $candate _ dd mmm yy hour minute seconds
	set yyyy [expr 2000 + $yy]
	set mm [lsearch -exact $monthlist $mmm]

	set buf "[format "%04d" $yyyy]-[format "%02d" $mm]-[format "%02d" $dd]T$hour:$minute"

	return $buf
}

proc tdom_add_text {doc base name contents} {
	set node [$doc createElement $name]
	$node appendChild [$doc createTextNode $contents]
	$base appendChild $node
	return
}

proc export_xml {wpvar} {
	upvar 1 $wpvar waypoints

	if {[file exists $waypoints(outfile)]} {
		logmsg "  Outfile already exists"
		#return
	}

	set doc [dom createDocument uddf]
	$doc encoding utf-8
	
	set root [$doc documentElement]
	$root setAttribute version 3.0.0

	set node_generator [$doc createElement generator]
	$root appendChild $node_generator

	tdom_add_text $doc $node_generator name		cochran2uddf
	tdom_add_text $doc $node_generator version	1.0
	tdom_add_text $doc $node_generator datetime	[clock format [clock seconds] -format "%Y-%m-%dT%H:%MZ" -gmt 1]
	tdom_add_text $doc $node_generator type		converter

	set node_manufacturer [$doc createElement manufacturer]
	$node_generator appendChild $node_manufacturer

	tdom_add_text $doc $node_manufacturer name	"David McNett"

	set node_contact [$doc createElement contact]
	$node_manufacturer appendChild $node_contact

	tdom_add_text $doc $node_contact email		nugget@macnugget.org
	tdom_add_text $doc $node_contact homepage	https://github.com/nugget/cochran2uddf

	set node [$doc createElement name]
	$node appendChild [$doc createTextNode "David McNett"]
	$node_manufacturer appendChild $node

	set node_profiledata [$doc createElement profiledata]
	$root appendChild $node_profiledata

	set node_rep [$doc createElement repetitiongroup]
	$node_profiledata appendChild $node_rep
	$node_rep setAttribute id $waypoints(basename)

	set node_dive [$doc createElement dive]
	$node_rep appendChild $node_dive
	$node_dive setAttribute id $waypoints(basename)

	set node_before [$doc createElement informationbeforedive]
	$node_dive appendChild $node_before
	tdom_add_text $doc $node_before internaldivenumber $waypoints(dive_number)
	tdom_add_text $doc $node_before datetime [iso_datetime $waypoints(candate)]

	set node_samples [$doc createElement samples]
	$node_dive appendChild $node_samples

	for {set i 0} {$i < [llength $waypoints(depths)]} {incr i} {
		set seconds		$i
		set feet		[lindex $waypoints(depths) $i]
		set meters		[expr $feet * 0.3048]
		set temp_f		[lindex $waypoints(temps) $i]
		set temp_k		[expr ($temp_f - 32) * 5/9 + 273.15]
		set pressure_c	[lindex $waypoints(hp1) $i]
		set pressure_p	[expr $pressure_c * 4]
		set pascals		[expr $pressure_p * 6894.75729]

		set node [$doc createElement waypoint]
		$node_samples appendChild $node
		tdom_add_text $doc $node depth			[string trim [format %8.3f $meters]]
		tdom_add_text $doc $node divetime		[string trim [format %6.1f $i]]
		tdom_add_text $doc $node tankpressure	[string trim [format %10.1f $pascals]]
		tdom_add_text $doc $node temperature	[string trim [format %6.1f $temp_k]]
	}

	# parray waypoints

	logmsg "Data element count:"
	logmsg "  depths: [llength $waypoints(depths)]"
	logmsg "        : [lrange $waypoints(depths) 10 30]"
	logmsg "  avgdpt: [get_avg $waypoints(depths)]"
	logmsg "  temps : [llength $waypoints(temps)]"
	logmsg "  hp1   : [llength $waypoints(hp1)]"
	logmsg "       s: [lrange $waypoints(hp1) 0 10]"
	logmsg "       e: [lrange $waypoints(hp1) end-10 end]"

	set fh [open $waypoints(outfile) w]
	puts $fh [$root asXML]
	close $fh

	$doc delete
}

proc parse_csv {wpvar file values} {
	logmsg "  importing $file $values to $wpvar"
	upvar 1 $wpvar waypoints

	set fbuf [read_file $file]
	set blist [split $fbuf ","]

	set waypoints(canfile)	[lindex $blist 0]
	set waypoints(divenum)	[lindex $blist 1]
	set waypoints(candate)	[lindex $blist 2]
	set waypoints(unk1)		[lindex $blist 3]
	set waypoints(unk2)		[lindex $blist 4]
	set waypoints(model)	[lindex $blist 5]
	set waypoints(unk3)		[lindex $blist 7]
	set waypoints($values)	[lrange $blist 8 end-1]

	return
}

proc main {} {
	set basename ""

	cd import

	foreach file [lsort [glob T*]] {
		if {$basename != [file rootname $file]} {
			set basename [file rootname $file]
			regexp {D(\d+)$} $basename _ dive_number

			if {[array exists waypoints]} {
				export_xml waypoints
			}

			logmsg "$basename ($dive_number)"
			unset -nocomplain waypoints

			set waypoints(basename)		$basename
			set waypoints(dive_number)	$dive_number
			set waypoints(outfile)		"../export/${basename}.uddf"
		}

		set ext [file extension $file]

		switch $ext {
			.dpt {
				parse_csv waypoints $file depths
			}
			.hp1 {
				parse_csv waypoints $file hp1
			}
			.tmp {
				parse_csv waypoints $file temps
			}
			default {
				logmsg "Unknown extension: $ext"
			}
		}
	}
	if {[array exists waypoints]} {
		export_xml waypoints
	}
}

if !$tcl_interactive main
